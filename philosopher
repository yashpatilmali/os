#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#define NUM_PHILOSOPHERS 5  


pthread_mutex_t forks[NUM_PHILOSOPHERS];


void* philosopher(void* num) {
    int id = *((int*)num);
    int left = id;                 
    int right = (id + 1) % NUM_PHILOSOPHERS; 

    while (1) {
       
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);  

        
        printf("Philosopher %d is hungry.\n", id);

        if (id % 2 == 0) {
           
            pthread_mutex_lock(&forks[left]);
            pthread_mutex_lock(&forks[right]);
        } else {
            
            pthread_mutex_lock(&forks[right]);
            pthread_mutex_lock(&forks[left]);
        }

        
        printf("Philosopher %d is eating.\n", id);
        sleep(1);  

        
        pthread_mutex_unlock(&forks[left]);
        pthread_mutex_unlock(&forks[right]);
    }
    
    return NULL; 
}

int main() {
    pthread_t thread_id[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];


    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&thread_id[i], NULL, philosopher, &philosopher_ids[i]);
    }

    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(thread_id[i], NULL);
    }

   
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
